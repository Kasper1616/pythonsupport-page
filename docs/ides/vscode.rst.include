
.. _ide-vscode:

Visual Studio Code {{pref_symbol}}
--------------------------------------

`VS Code <https://code.visualstudio.com/>`__ is a an open-source coding framework with a big community
and many users.
It can be used together with any other coding language or be used to edit configuration files (YAML, TOML, ...).

It can be downloaded `here <https://code.visualstudio.com/download>`__.

Once installed it is vital to ensure the Python interpreter is pointing to the *correct* Python executable.
This depends on whether you are using :ref:`virtual environments <python-environments>`, see :ref:`here <environment-venv-vscode>`.
Changing the interpreter location can be done by following `this instruction <https://code.visualstudio.com/docs/python/environments#_manually-specify-an-interpreter>`__.


User Interface
^^^^^^^^^^^^^^
    .. images/Vscode-Interface.png
      :width: 700
      :align: center

**Editor:** The main editor is where you write and edit your code or text files. It's the central area of VSCode where you will spend most of your time.

**Activity bar:** The sidebar, located on the left side of the interface, provides quick access to various functionalities and information about your project. 

**Panel:** An additional space for views below the editor. By default, it houses output, debug information, problems, and an integrated terminal.

**Menu bar:** You can use this to open files and folders

**Run and debug:** Pressing this button will run the file which is currently open in the editor.

Panel
^^^^^^
The Panel, located at the bottom of the interface (see above), consists of several important tabs:

**Problems:** Displays a list of coding errors, warnings, and messages, helping you identify and fix issues in your code.

**Output:** Shows output messages generated by your code, extensions, or tasks, providing valuable debugging and diagnostic information.

**Debug Console:** A console for interactive debugging, where you can input commands and view program output while debugging your code.

**Integrated Terminal:** Offers a command-line interface within Visual Studio Code, allowing you to run terminal commands and scripts directly from the editor.

Activity Bar
^^^^^^^^^^^^
    .. image:: images/Vscode-Activity.png
      :width: 700
      :align: center
The Activity bar, located on the left side of the interface (see above), provides quick access to various functionalities and information about your project. The most used tabs in the activity bar is the explorer tab, run and debug tab and the extensions tab.

**Explorer:** The "Explorer" tab in the sidebar is where you manage your project's files and folders. It provides a file tree view of your project's directory structure.

**Run and debug:** The "Run and Debug" tab is essential for debugging your code and running your applications within VSCode.

**Extensions:** The "Extensions" tab is your gateway to customizing and extending the functionality of VSCode through various extensions.
VS Code is an extensible and versatile development environment.
The extensions can greatly aid during the coding of varying problems.
Some notable highlights include automatic API messages for methods, and
integration with Jupyter notebooks.

Extensions can be installed by following `these instructions <https://code.visualstudio.com/docs/editor/extension-marketplace>`__.

Creating and Opening Projects
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
1. Create a folder for a project. You can do this by creating a folder e.g. on the desktop.

2. Open the project be clicking on file on the menu bar and then clicking on "open folder" (see below) then navigate to your project folder.

    .. image:: images/Vscode-Open_folder.png
      :width: 600
      :align: center

3. Create a folder inside your project by clicking on the seecond most left icon (see below).

    .. image:: images/Vscode-Create_folder.png
      :width: 600
      :align: center

Working with Files
^^^^^^^^^^^^^^^^^^
1. Create a new file inside your project by clicking on the left icon (see below) and e.g. naming it "new_file.py" - the ending ".py" makes it a python file.
If you want to create a new file inside a folder in your project, make sure click on the folder before creating the file.

    .. image:: images/files1.png
      :width: 600
      :align: center

2. Save the file by clicking on file on the menu bar and then clicking on "Save" (see below).

    .. image:: images/Save_file.png
      :width: 600
      :align: center

3. To move a file to a folder simply click on the file and hold, then drag the file to the folder.

Install requirements.txt 
^^^^^^^^^^^^^^^^^^^^^^^^
1. Navigate into the folder from where you want to access the packages (see "Creating and Opening Projects"). 

2. Open up your terminal (navigate to the Menu-bar, choose Terminal -> New Terminal). You can then copy the following command into your terminal and
press enter to execute:

Windows:
python -m pip install -r requirements.txt

Mac or Linux:
python3 -m pip install -r requirements.txt

The installation of the packages will take a few minutes. After it is done you will se the path of the folder you are in followed by an "%". 


Extensions
^^^^^^^^^^
Extensions can be installed by following `these instructions <https://code.visualstudio.com/docs/editor/extension-marketplace>`__.


Debugging
^^^^^^^^^
Debugging is the process of finding and fixing errors within a script. 
VSCode provides a powerful debugging tool that allows you to set breakpoints, step through code, and inspect variables.

1. Set a breakpoint, click on the left of the line number where you want to pause the execution of your code. 
A red dot will appear to indicate that a breakpoint has been set, it is possible to set multiple breakpoints in your code.
To remove a breakpoint, click on the red dot again.

2. Start a debugging session, click on the "Run and Debug" tab in the sidebar and select "Run and Debug".
This will open the debug panel at the top of the screen and start the debugging session.

    .. image:: images/Debugging.png
      :width: 600
      :align: center

The buttons in the debug panel allow you to control the execution of your code. From left to right the buttons are:

**Continue:** Continue running the code until the next breakpoint is reached.

**Step over:** Execute the next line of code. 

**Step into:** Execute the next line of code, if the next line is a function call, step into the function.

**Step out:** Execute the remaining lines of the function and return to the line where the function was called.

**Restart:** Restart the debugging session.

**Stop:** Stop the debugging session.

3. Follow the variables in your code and their values on the left.

    .. image:: images/Debugging2.png
      :width: 600
      :align: center



Virtual environment (venv)
^^^^^^^^^^^^^^^^^^^^^^^^^^
Virtual environments are isolated spaces in computing to manage software dependencies separately. They prevent conflicts, ensure project portability, and maintain system stability. 
You can read more about virtual environments `here <https://pythonsupport.dtu.dk/python/environments.html>`__.

The interpreter is the program that executes the code you write. It is important to ensure that the interpreter is pointing to the correct Python executable (environment).
To change the interpreter location open a python file and click on the Python version in the bottom left corner of the screen (see below).

    .. image:: images/Interpreter.png
      :width: 600
      :align: center

Then select the correct interpreter (see below).

    .. image:: images/Interpreter2.png
      :width: 600
      :align: center

Importing packages
^^^^^^^^^^^^^^^^^^

In order to write your code you can benefit from a bunch of different python-packages that will help you with your calculation. In Python these packages typically end
with the letters "py". For example there is sympy, which will help you with caluclating with variables (or symbols), numpy which is used for numerical calculations and 
matplotlib, which is used for plotting your data. You will typically import the packages you want to use in the top of your project so that you can use them throughout 
the following code.

1. Open a new project.
helos
2. There are several different ways of importing packages. We will here show you some examples:

  - ``import <name of the package>``
      This is the simplest way of importing packages. In order to call functions from the package you have to write the name of the package, followed by ``.`` and then 
      the function you want to use (for example ``numpy.sqrt(2)``).
  - ``import <name of the package> as ...``
      If you don't want to write the whole name of the packages every time you use a command from them, you can define a shorter name for them yourself, that you want
      to call them. Typically one will write ``import numpy as np`` instead of ``import numpy`` or ``import sympy as sp`` instead of ``import sympy``, so that you don't have to write 
      the entire name every time you want to call a function from that package.
  - ``from <name of the package> import *``
      You can use this command if you want to import the whole package without having to write the name or the abbreviation of the package in front of the function. It already knows 
      that you want to import the function from this package. The ``*`` indicates that you imported everything from this package.
      For example one can write ``from sympy import *`` and then create a matrix by writing ``Matrix([[... , ...],[... , ...]])`` instead of writing ``sp.Matrix([[... , ...],[... , ...]])``
      or even ``sympy.Matrix([[... , ...],[... , ...]])``.
  - ``from <name of the package> import <name of function>``
      You can use this command if you only want to import specific functions from the package. This will allow you to import only the functions that you are using. For example the command
      ``from matplotlib import pyplot`` will import only the function ``pyplot`` from the package ``matplotlib``. You can then for example call the function ``pyplot.plot(x,y)``.
  - ``import <name of the package>.<name of function> as ...``
      This command is helpful if you again only want to import specific functions but you also want to call them something else (often times something shorter). If you for example run the
      command ``import matplotlib.pyplot as plt`` you will import the exact same function as in the example before but you don't have to write as much in order to call the function: ``plt.plot(x, y)``.


Customization
^^^^^^^^^^^^^
Vscode has a lot of options that allows you to tailor it towards your individual preferences. These options can be found by pressing the cogwheel butten in the lower left corner.

>> Insert picture of the cogwheel and the pop-up menu<<

**Key Bindings** Vscode enables you to bind a key to pretty much any action imaginable within an IDE. A majority of the actions has already been allocated as defualt, but if you want to change some of the IDE's key bindings you can press ``CTRL+K+S``. This key binding brings up Vscode's keyboard shortcut menu.

For starters, you would perhaps want to add a shortcut for running a python file. This can be done by searching "run python file" in the keyboard shortcuts menu, and double-clicking on ``Python: Run Python File``. Thereafter, you can enter a personal shortcut for the functionality and finishing by pressing enter again. 

>> Insert picture of procedure explained <<

For more options on key bindings press `here <https://code.visualstudio.com/docs/getstarted/keybindings>`__.
Conclusion
Summarize the key points covered in the tutorial.
Encourage users to explore more advanced features and resources for further learning.
Additional Tips:

Use screenshots and visuals to illustrate the concepts.
Include download links and references to official documentation for more in-depth exploration.
Keep instructions clear and concise, using beginner-friendly language.
Encourage users to practice what they've learned by providing exercises or sample projects.
Remember to update the tutorial as needed to reflect any changes in the VSCode interface or features in newer versions. This comprehensive tutorial should provide beginners with a solid foundation for using Visual Studio Code effectively.
